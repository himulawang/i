require('./lib/IConst.js');
var fs = require('fs');
var path = require('path');

var orms = require('./config/IORM.js').orms;
var IException = require('./lib/IException.js').IException;

/* Check Config File */
var checkModelAbb = function() {
    var repeats = {};
    orms.forEach(function(orm) {
        if (repeats[orm.abb]) throw new IException(10002);
        repeats[orm.abb] = true;
    });
};

checkModelAbb();

/* Remove All Model Files */
var removeFileInPath = function(path) {
    var files = fs.readdirSync(path);

    files.forEach(function(filename) {
        fs.unlinkSync(path + '/' + filename);
        console.log('Delete', filename, 'Done!');
    });
};
// removeFileInPath('./model');

var create = function(orm) {
    switch (orm.type) {
        case IConst.OBJECT_TYPE_HASH:
            createBOFile(orm);
            createModelBOFile(orm);
            break;
        case IConst.OBJECT_TYPE_LIST:
            createListFile(orm);
            createModelListFile(orm);
            break;
        default:
            throw new IException(10001);
    }
};

/* Abb */
var abbMake = function(full) {
    var reg = /[a-z]/g;
    return  (full[0] + full.replace(reg, '')).toLowerCase();
};

var abbExist = function(abb, abbs) {
    for (var column in abbs) {
        if (abbs[column] === abb) return true;
    }
};

var abbRename = function(abb) {
    return /^([a-zA-Z0-9]+?)(\d+)$/.test(abb) ? RegExp.$1 + (parseInt(RegExp.$2) + 1) : abb + 1;
};

var abbMakeArray = function(columns, filter) {
    var abbs = {};
    var i = 0;
    columns.forEach(function(column) {
        // filter
        if (filter.indexOf(i) !== -1) {
            ++i;
            return;
        }

        var candidateAbb = abbMake(column);
        while (abbExist(candidateAbb, abbs)) {
            candidateAbb = abbRename(candidateAbb);
        }
        abbs[column] = candidateAbb;
        ++i;
    });

    return abbs;
};

/* Model */
var createBOFile = function(orm) {
    // comments
    var content = "/* This file is generated by deploy.js automatically */\n";
    var abbs = abbMakeArray(orm.column, orm.clientFilter);

    // make constructor
    content += 'var ' + orm.name + ' = function ' + orm.name + "(args) {\n";
    content += "    this.pk = '" + orm.pk + "';\n";
    content += "    this.column = " + JSON.stringify(orm.column) + ";\n";
    content += "    this.abb = " + JSON.stringify(abbs) + ";\n";
    content += "    this.init.call(this, args);\n";
    content += "};\n";
    content += "\n";

    // extends
    content += orm.name + ".prototype = new IObject();\n";
    content += orm.name + ".prototype.constructor = " + orm.name + ";\n";
    content += "\n";

    // make getter
    content += "/* Getter */\n";
    orm.column.forEach(function(v, i) {
        content += orm.name + ".prototype.__defineGetter__('" + v + "', function() { return this.args[" + i + "]; });\n";
    });
    content += "\n";

    // make setter
    content += "/* Setter */\n";
    orm.column.forEach(function(v, i) {
        content += orm.name + ".prototype.__defineSetter__('" + v + "', function(val) { this.args[" + i + "] = val; this.updateList[" + i + "] = 1; });\n";
    });
    content += "\n";

    // make exports
    content += 'global.' + orm.name + ' = ' + orm.name + ';';

    // write
    write(orm.name, content, './model');
};

var createListFile = function(orm) {
    // comments
    var content = "/* This file is generated by deploy.js automatically */\n";

    // make constructor
    content += "var " + orm.name + " = function " + orm.name + "(pk, index, list) {\n";
    content += "    IList.call(this, pk, index, list);\n";
    content += "};\n";
    content += "\n";

    // extends
    content += orm.name + ".prototype = new IList();\n";
    content += orm.name + ".prototype.constructor = " + orm.name + ";\n";
    content += "\n";

    // make exports
    content += 'global.' + orm.name + ' = ' + orm.name + ';';

    // write
    write(orm.name, content, './model');
};

var createModelBOFile = function(orm) {
    var modelName = orm.name + 'Model';
    // comments
    var content = "/* This file is generated by deploy.js automatically */\n";

    content += "var " + modelName + " = function " + modelName + "() {\n";
    content += "    this.type = '" + orm.type + "';\n";
    content += "    this.objectName = '" + orm.name + "';\n";
    content += "    this.abb = '" + orm.abb + "';\n";
    content += "    this.pk = '" + orm.pk + "';\n";
    content += "    this.updateFilter = " + JSON.stringify(orm.updateFilter) + ";\n";
    content += "};\n";
    content += "\n";

    content += modelName + ".prototype = new IModel();\n";
    content += modelName + ".prototype.constructor = " + modelName + ";\n";
    content += "\n";

    content += "global." + modelName + " = new " + modelName + "();\n";
    write(modelName, content, './model');
};

var createModelListFile = function(orm) {
    var modelName = orm.name + 'Model';
    // comments
    var content = "/* This file is generated by deploy.js automatically */\n";

    content += "var " + modelName + " = function " + modelName + "() {\n";
    content += "    this.type = '" + orm.type + "';\n";
    content += "    this.objectName = '" + orm.name + "';\n";
    content += "    this.abb = '" + orm.abb + "';\n";
    content += "    this.child = '" + orm.child + "';\n";
    content += "    this.childModel = " + orm.child + "Model;\n";
    content += "};\n";
    content += "\n";

    content += modelName + ".prototype = new IModel();\n";
    content += modelName + ".prototype.constructor = " + modelName + ";\n";
    content += "\n";

    content += "global." + modelName + " = new " + modelName + "();\n";
    write(modelName, content, './model');
};

var write = function(name, content, path, overwrite) {
    var filename = name + '.js';
    var fullPath = path + '/' + filename;

    if (!overwrite && fs.existsSync(fullPath)) {
        console.log(fullPath, 'exists, skip!');
        return;
    }
    fs.writeFile(fullPath, content);
    console.log(fullPath, 'Done!');
};

// create model files
orms.forEach(function(v) {
    create(v);
});

// create loader file
var loaderContent = 
"/* This file is generated by deploy.js automatically */\n" +
"var redis = require('redis');\n" +
"global.db = redis.createClient();\n" +
"\n" +
"/* IFramework */\n" +
"require('./Asyn.js');\n" + 
"require('./Syn.js');\n" + 
"require('./IConst.js');\n" + 
"require('./IException.js');\n" + 
"require('./IUtil.js');\n" + 
"require('./IObject.js');\n" +
"require('./IList.js');\n" +
"require('./IModel.js');\n" +
"require('./IController.js');\n" +
"\n" +
"/* App */\n";

// add model
orms.forEach(function(orm) {
    loaderContent += "require('../model/" + orm.name + ".js');\n";
    loaderContent += "require('../model/" + orm.name + "Model.js');\n";
});

// add const
loaderContent += 
"\n" +
"/* Const */\n";
files = fs.readdirSync('./const/');
files.forEach(function(v) {
    loaderContent += "require('../const/" +  v + "');\n";
});

// add action
loaderContent += 
"\n" +
"/* Action */\n";
files = fs.readdirSync('./action/');
files.forEach(function(v) {
    loaderContent += "require('../action/" +  v + "');\n";
});

// add logic
loaderContent += 
"\n" +
"/* Logic */\n";
files = fs.readdirSync('./logic/');
files.forEach(function(v) {
    loaderContent += "require('../logic/" +  v + "');\n";
});

// merge exception
loaderContent += 
"\n" +
"/* Merge Exception */\n" +
"var IEX = require('../config/IEX.js').IEX;\n" +
"for (var i in IEX) {\n" + 
"    IExceptionCodes[i] = IEX[i];\n" +
"}\n";

// add data
loaderContent += 
"\n" +
"/* Data */\n";
files = fs.readdirSync('./data/');
files.forEach(function(v) {
    loaderContent += "require('../data/" +  v + "');\n";
});

write('ILoader', loaderContent, './lib', true /* overwrite */);
