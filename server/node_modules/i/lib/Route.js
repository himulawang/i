!function () {
    var Route = function Route(routes) {
        this.routes = routes;
    };

    Route.prototype.process = function(connection, params) {
        var route = this.routes[params.a];
        if (!route) {
            throw new I.Exception(10301);
        }

        // type validate
        var validateResult = this.validate(params.p, route.param);

        // add logic
        I.Ctrl[route.ctrl + 'Controller'][route.action](connection, params.a, params.p);
    };

    Route.prototype.validate = function(params, paramConfig) {
        var validateResult;
        for (var name in paramConfig) {
            validateResult = this.validateEach(params[name], paramConfig[name]);
        }
    };

    Route.prototype.validateEach = function(value, type) {
        if (type.length !== 2) throw new I.Exception(10302); // TODO put this to server init

        var iConst = I.Const.Frame;
        var util = I.Util;
        var passDataTypeValidation = false;

        switch (type[0]) {
            case iConst.PARAM_TYPE_ALLOW_MISS:
                if (value === undefined) passDataTypeValidation = true;
                break;
            case iConst.PARAM_TYPE_ALLOW_EMPTY:
                if (util.isEmpty(value)) passDataTypeValidation = true;
                break;
            case iConst.PARAM_TYPE_FORBID_EMPTY:
                if (util.isEmpty(value)) throw new I.Exception(10303);
                break;
            default:
                throw new I.Exception(10304);
        }

        if (passDataTypeValidation) return;
        switch (type[1]) {
            case iConst.PARAM_TYPE_INT:
                if (!util.isInt(value)) throw new I.Exception(10305);
                break;
            case iConst.PARAM_TYPE_STRING:
                if (!util.isString(value)) throw new I.Exception(10306);
                break;
            case iConst.PARAM_TYPE_ARRAY:
                if (!util.isArray(value)) throw new I.Exception(10307);
                break;
            case iConst.PARAM_TYPE_HASH:
                if (!util.isHash(value)) throw new I.Exception(10308);
                break;
            default:
                throw new I.Exception(10309);
        }
    };

    I.Util.require('Route', '', Route);
}();
