!function() {
    var PKRedisStore = function PKRedisStore() {};

    PKRedisStore.prototype.init = function init(db) {
        this.db = db;
    };

    PKRedisStore.prototype.get = function get(cb) {
        var deferred = Q.defer();
        cb = cb || function() {};
        this.db.get(this.key, function(err, data) {
            if (err) {
                var ex = new I.Exception(10125, err);
                cb(ex);
                deferred.reject(ex);
                return;
            }
            var pkClass = this.getModel();
            if (data !== null) {
                pk.fromStore = true;
            }
            var pk = new pkClass(data);
            cb(null, pk);
            deferred.resolve(pk);
        }.bind(this));
        return deferred.promise;
    };

    PKRedisStore.prototype.set = function set(pk, cb) {
        var deferred = Q.defer();
        cb = cb || function() {};
        if (pk instanceof this.getModel() === false) {
            var ex = new I.Exception(10109);
            cb(ex);
            deferred.reject(ex);
            return;
        }
        if (pk.updated === false) {
            cb(null);
            deferred.resolve();
        }
        this.db.set(this.key, pk.get(), function(err, result) {
            if (err) {
                var ex = new I.Exception(10122, err);
                cb(ex);
                deferred.reject(ex);
                return;
            }
            pk.updated = false;
            cb(null, result);
            deferred.resolve(result);
        });
        return deferred.promise;
    };

    PKRedisStore.prototype.unset = function unset(pk, cb) {
        var deferred = Q.defer();
        cb = cb || function() {};
        if (pk instanceof this.getModel() === false) {
            var ex = new I.Exception(10121);
            cb(ex);
            deferred.reject(ex);
            return;
        }
        this.db.del(this.key, function(err, result) {
            if (err) {
                var ex = new I.Exception(10124, err);
                cb(ex);
                deferred.reject(ex);
                return;
            }
            cb(null, result);
            deferred.resolve(result);
        });
        return deferred.promise;
    };

    PKRedisStore.prototype.sync = function sync(pk, cb) {
        cb = cb || function() {};
        if (pk.tagDelSync) {
            this.unset(pk, cb);
        } else {
            this.set(pk, cb);
        }
    };

    I.Util.require('PKRedisStore', 'Models', PKRedisStore);
}();
