!function () {
    var ListRedisStore = function ListRedisStore() {};

    ListRedisStore.prototype.init = function init(db) {
        this.db = db;
    };

    ListRedisStore.prototype.get = function get(pk, cb) {
        cb = cb || function() {};
        this.db.hkeys(this.abb + pk, function(err, data) {
            if (err) return cb(new I.Exception(10107, err));
            var listModelClass = this.getListModel();
            // empty list
            if (data.length === 0) {
                var list = new listModelClass(pk);
                cb(null, list);
                return;
            }

            list.fromStore = true;
            var modelList = {};
            var retrievedCount = 0;
            // fill elements
            data.forEach(function(v) {
                this.getChildStore().get(v, function(err, model) {
                    modelList[v] = model;
                    ++retrievedCount;
                    if (data.length === retrievedCount) {
                        var list = new listModelClass(pk, modelList);
                        cb(null, list);
                    }
                });
            }.bind(this));
        }.bind(this));
    };

    ListRedisStore.prototype.del = function del(list, cb) {
        cb = cb || function() {};
        if (list instanceof this.getListModel() === false) return cb(new I.Exception(10108));

        if (list.list.length === 0) {
            cb(null, list);
            return
        }

        var dbMulti = this.db.multi();
        // del list index
        dbMulti.del(this.abb + list.getPK());
        
        // del hash
        list.getKeys().forEach(function(v) {
            dbMulti.del(this.getChildStore().abb + v);
        }.bind(this));

        dbMulti.exec(function(err, results) {
            if (err) return cb(new I.Exception(10116, err));
            list.reset();
            cb(null, list, results);
        });
    };

    ListRedisStore.prototype.update = function update(list, cb) {
        cb = cb || function() {};
        if (list instanceof this.getListModel() === false) return cb(new I.Exception(10138));
        var util = I.Util;
        var dbMulti = this.db.multi();

        var exec = function exec() {
            dbMulti.exec(function(err, results) {
                if (err) return cb(new I.Exception(10117, err));
                cb(null, list, results);
            });
        };

        var childStore = this.getChildStore();
        // del
        list.toDelList.forEach(function(child) {
            var pk = child.getPK();
            dbMulti.del(childStore.abb + pk);
            dbMulti.hdel(this.abb + list.getPK(), pk);
            list.unset(pk);
        }.bind(this));
        list.toDelList = [];

        // update
        list.toUpdateList.forEach(function(child) {
            var toDB = child.toUpdate(true);
            if (util.getLength(toDB) === 0) return;
            dbMulti.hmset(childStore.abb + child.getPK(), toDB);
        });
        list.toUpdateList = [];

        // add
        var toAddListLength = list.toAddList.length;
        if (toAddListLength === 0) return exec();

        var addedCount = 0;
        list.toAddList.forEach(function(v) {
            childStore.add(v, function(err, child) {
                list.set(child);
                ++addedCount;
                dbMulti.hset(this.abb + list.getPK(), child.getPK(), 1);
                if (toAddListLength === addedCount) {
                    list.toAddList = [];
                    exec();
                }
            }.bind(this));
        }.bind(this));
    };

    ListRedisStore.prototype.updateSync = function updateSync(list, cb) {
        cb = cb || function() {};
        var store = this.getListModel();
        if (list instanceof this.getListModel() === false) return cb(new I.Exception(10142));
        if (list.toDelSyncList.length === 0 && list.toUpdateSyncList.length === 0 && list.toAddSyncList.length === 0) return cb(null);
        var util = I.Util;
        var dbMulti = this.db.multi();

        var childModel = this.getChildModel();
        var childStore = this.getChildStore();
        // del
        list.toDelSyncList.forEach(function(child) {
            var pk = child.getPK();
            dbMulti.del(childStore.abb + pk);
            dbMulti.hdel(this.abb + list.getPK(), pk);
        }.bind(this));
        list.toDelSyncList = [];

        // update
        list.toUpdateSyncList.forEach(function(index) {
            var child = list.get(index);
            var toDB = child.toUpdate(true);
            if (util.getLength(toDB) === 0) return;
            dbMulti.hmset(childStore.abb + child.getPK(), toDB);
            child.reset();
        });
        list.toUpdateSyncList = [];

        // add
        list.toAddSyncList.forEach(function(index) {
            var child = list.get(index);
            var toDB = child.toAdd();
            dbMulti.hmset(childStore.abb + index, toDB);
            dbMulti.hset(this.abb + list.getPK(), child.getPK(), 1);
        }.bind(this));
        list.toAddSyncList = [];

        dbMulti.exec(function(err, results) {
            if (err) return cb(new I.Exception(10123, err));
            cb(err, results);
        });
    };

    ListRedisStore.prototype.sync = function sync(list, cb) {
        cb = cb || function() {};
        if (list.tagDelSync) {
            this.del(list, cb);
        } else {
            this.updateSync(list, cb);
        }
    };

    I.Util.require('ListRedisStore', 'Models', ListRedisStore);
}();
