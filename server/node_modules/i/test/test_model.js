global.I_ABS_PATH = '/home/ila/project/pcs/server/node_modules/i';
global.APP_ABS_PATH = '/home/ila/project/pcs/server/node_modules/i/test';
var TEST_STORE = true;

var init = function init() {
    var loader = require(I_ABS_PATH + '/lib/Loader.js').Loader;
    loader.loadCore();
    loader.loadApp(APP_ABS_PATH);
};

init();

var makeColumn = function() {
    /*
        'id',
        'name',
        'isPK',
        'allowEmpty',
        'type',
        'client',
        'server',
        'description',
    */
    return new I.Models.Column(
        [
            1,
            'cardId',
            1,
            0,
            'number',
            1,
            1,
            'card pk',
        ]
    );
};

var makeColumnList = function() {
    return new I.Models.ColumnList(1);
};

var makeColumnListWithData = function() {
    var column1 = makeColumn();
    var column2 = makeColumn();
    column2.setPK(2);
    return new I.Models.ColumnList(1, 
        {
            1: column1,
            2: column2,
        }
    );
};


// pk
exports.pk = {
    init: function(test) {
        var columnPK = new I.Models.ColumnPK();
        test.equal(columnPK.get(), 0);
        test.equal(columnPK.updated, false);
        test.done();
    },
    setValue: function(test) {
        var columnPK = new I.Models.ColumnPK();
        columnPK.set(20);
        test.equal(columnPK.get(), 20);
        test.equal(columnPK.updated, true);
        test.done();
    },
    incr1Value: function(test) {
        var columnPK = new I.Models.ColumnPK();
        test.equal(columnPK.incr(), 1);
        test.equal(columnPK.updated, true);
        test.done();
    },
    incr17Value: function(test) {
        var columnPK = new I.Models.ColumnPK();
        columnPK.incr(7);
        columnPK.incr(3);
        columnPK.incr(7);
        test.equal(columnPK.get(), 17);
        test.equal(columnPK.updated, true);
        test.done();
    },
    reset: function(test) {
        var columnPK = new I.Models.ColumnPK();
        columnPK.incr(7);
        columnPK.reset();
        test.equal(columnPK.get(), 0);
        test.equal(columnPK.updated, true);
        test.done();
    },
};

// pk store
if (TEST_STORE) exports.pkStore = {
    set: function(test) {
        var columnPK = new I.Models.ColumnPK(17);
        I.Models.ColumnPKStore.set(columnPK, function(err, result) {
            test.equal(result, 'OK');
            test.done();
        });
    },
    get: function(test) {
        I.Models.ColumnPKStore.get(function(err, data) {
            test.equal(data instanceof I.Models.ColumnPK, true);
            test.equal(data.get(), 17);
            test.done();
        });
    },
    unset: function(test) {
        I.Models.ColumnPKStore.get(function(err, data) {
            I.Models.ColumnPKStore.unset(data, function(err, result) {
                test.equal(result, 1);
                test.done();
            });
        });
    },
    verifyKey: function(test) {
        test.equal(I.Models.ColumnPKStore.key, I.Const.GLOBAL_KEY_PREFIX + 'c');
        test.done();
    },
};

// model
exports.model = {
    init: function(test) {
        var column = makeColumn();
        test.strictEqual(column.id, 1);
        test.strictEqual(column.name, 'cardId');
        test.strictEqual(column.isPK, 1);
        test.strictEqual(column.allowEmpty, 0);
        test.strictEqual(column.type, 'number');
        test.strictEqual(column.client, 1);
        test.strictEqual(column.server, 1);
        test.strictEqual(column.description, 'card pk');
        test.done();
    },
    setPK17: function(test) {
        var column = makeColumn();
        column.setPK(17);
        test.strictEqual(column.id, 17);
        test.strictEqual(column.updateList[0], 1);
        test.done();
    },
    getPK17: function(test) {
        var column = makeColumn();
        column.setPK(17);
        test.strictEqual(column.getPK(), 17);
        test.done();
    },
    clone: function(test) {
        var column = makeColumn();
        var clone = column.clone();
        clone.name = 'cardName';
        clone.isPK = 0;
        clone.allowEmpty = 1;
        clone.type = 'string';
        clone.client = 0;
        clone.server = 0;
        clone.description = 'card name';
        test.deepEqual(clone.updateList, [, 1, 1, 1, 1, 1, 1, 1,]);
        test.strictEqual(column.id, 1);
        test.strictEqual(column.name, 'cardId');
        test.strictEqual(column.isPK, 1);
        test.strictEqual(column.allowEmpty, 0);
        test.strictEqual(column.type, 'number');
        test.strictEqual(column.client, 1);
        test.strictEqual(column.server, 1);
        test.strictEqual(column.description, 'card pk');
        test.deepEqual(column.updateList, [, , , , , , , ,]);
        test.done();
    },
    resetUpdateList: function(test) {
        var column = makeColumn();
        column.name = 'cardName';
        column.isPK = 0;
        column.allowEmpty = 1;
        column.type = 'string';
        column.client = 0;
        column.server = 0;
        column.description = 'card name';
        column.resetUpdateList();
        test.deepEqual(column.updateList, [, , , , , , , ,]);
        test.done();
    },
    toAddNoFilter: function(test) {
        var column = makeColumn();
        var toAdd = column.toAdd();
        test.deepEqual(toAdd, [
                '1',
                'cardId',
                '1',
                '0',
                'number',
                '1',
                '1',
                'card pk',
            ]
        );
        test.done();
    },
    toUpdateNoFilter: function(test) {
        var column = makeColumn();
        column.name = 'cardNo';
        column.client = 0;
        var toUpdate = column.toUpdate();
        test.deepEqual(toUpdate, {
                1: 'cardNo',
                5: '0',
            }
        );
        test.done();
    },
    toUpdateWithFilter: function(test) {
        var column = makeColumn();
        column.id = '29'
        column.name = 'cardNo';
        column.client = 0;
        var toUpdate = column.toUpdate(true);
        test.deepEqual(toUpdate, {
                1: 'cardNo',
                5: '0',
            }
        );
        test.done();
    },
    toAbbArrayNoFilter: function(test) {
        var column = makeColumn();
        var toAbbArray = column.toAbbArray();
        test.deepEqual(toAbbArray, {
                i: 1,
                n: 'cardId',
                ipk: 1,
                ae: 0,
                t: 'number',
                c: 1,
                s: 1,
                d: 'card pk',
            }
        );
        test.done();
    },
    toAbbArrayWithFilter: function(test) {
        var column = makeColumn();
        var toAbbArray = column.toAbbArray(true);
        test.deepEqual(toAbbArray, {
                ipk: 1,
                ae: 0,
                t: 'number',
                c: 1,
                s: 1,
                d: 'card pk',
            }
        );
        test.done();
    },
    toArrayNoFilter: function(test) {
        var column = makeColumn();
        var toArray = column.toArray();
        test.deepEqual(toArray, {
                id: 1,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            }
        );
        test.done();
    },
    toArrayWithFilter: function(test) {
        var column = makeColumn();
        var toArray = column.toArray(true);
        test.deepEqual(toArray, {
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
            }
        );
        test.done();
    },
    toAbbDiffNoFilter: function(test) {
        var column = makeColumn();
        column.name = 'cardSth';
        column.client = 0;
        var toAbbDiff = column.toAbbDiff();
        test.deepEqual(toAbbDiff, {
                n: 'cardSth',
                c: 0,
            }
        );
        test.done();
    },
    toAbbDiffHasFilter: function(test) {
        var column = makeColumn();
        column.name = 'cardSth';
        column.client = 0;
        var toAbbDiff = column.toAbbDiff(true);
        test.deepEqual(toAbbDiff, {
                c: 0,
            }
        );
        test.done();
    },
    toArrayDiffNoFilter: function(test) {
        var column = makeColumn();
        column.name = 'cardSth';
        column.client = 0;
        var toArrayDiff = column.toArrayDiff();
        test.deepEqual(toArrayDiff, {
                name: 'cardSth',
                client: 0,
            }
        );
        test.done();
    },
    toArrayDiffWithFilter: function(test) {
        var column = makeColumn();
        column.name = 'cardSth';
        column.client = 0;
        var toArrayDiff = column.toArrayDiff(true);
        test.deepEqual(toArrayDiff, {
                client: 0,
            }
        );
        test.done();
    },
    fromAbbArrayResetUpdateList: function(test) {
        var column = makeColumn();
        var toAbb = column.toAbbArray();

        var newColumn = new I.Models.Column();
        newColumn.fromAbbArray(toAbb, true);
        test.deepEqual(newColumn.updateList, [, , , , , , , ,]);
        test.strictEqual(newColumn.id, 1);
        test.strictEqual(newColumn.name, 'cardId');
        test.strictEqual(newColumn.isPK, 1);
        test.strictEqual(newColumn.allowEmpty, 0);
        test.strictEqual(newColumn.type, 'number');
        test.strictEqual(newColumn.client, 1);
        test.strictEqual(newColumn.server, 1);
        test.strictEqual(newColumn.description, 'card pk');
        test.done();
    },
    fromAbbArrayNotResetUpdateList: function(test) {
        var column = makeColumn();
        var toAbb = column.toAbbArray();

        var newColumn = new I.Models.Column();
        newColumn.fromAbbArray(toAbb);
        test.deepEqual(newColumn.updateList, [1, 1, 1, 1, 1, 1, 1, 1]);
        test.strictEqual(newColumn.id, 1);
        test.strictEqual(newColumn.name, 'cardId');
        test.strictEqual(newColumn.isPK, 1);
        test.strictEqual(newColumn.allowEmpty, 0);
        test.strictEqual(newColumn.type, 'number');
        test.strictEqual(newColumn.client, 1);
        test.strictEqual(newColumn.server, 1);
        test.strictEqual(newColumn.description, 'card pk');
        test.done();
    },
    fromArrayResetUpdateList: function(test) {
        var column = makeColumn();
        var toArray = column.toArray();

        var newColumn = new I.Models.Column();
        newColumn.fromArray(toArray, true);
        test.deepEqual(newColumn.updateList, [, , , , , , , ,]);
        test.strictEqual(newColumn.id, 1);
        test.strictEqual(newColumn.name, 'cardId');
        test.strictEqual(newColumn.isPK, 1);
        test.strictEqual(newColumn.allowEmpty, 0);
        test.strictEqual(newColumn.type, 'number');
        test.strictEqual(newColumn.client, 1);
        test.strictEqual(newColumn.server, 1);
        test.strictEqual(newColumn.description, 'card pk');
        test.done();
    },
    fromArrayNotResetUpdateList: function(test) {
        var column = makeColumn();
        var toArray = column.toArray();

        var newColumn = new I.Models.Column();
        newColumn.fromArray(toArray);
        test.deepEqual(newColumn.updateList, [1, 1, 1, 1, 1, 1, 1, 1]);
        test.strictEqual(newColumn.id, 1);
        test.strictEqual(newColumn.name, 'cardId');
        test.strictEqual(newColumn.isPK, 1);
        test.strictEqual(newColumn.allowEmpty, 0);
        test.strictEqual(newColumn.type, 'number');
        test.strictEqual(newColumn.client, 1);
        test.strictEqual(newColumn.server, 1);
        test.strictEqual(newColumn.description, 'card pk');
        test.done();
    },
};

// model store
if (TEST_STORE) exports.modelStore = {
    add: function(test) {
        var column = makeColumn();
        I.Models.ColumnStore.add(column, function(err, data, result) {
            test.strictEqual(data.id, 1);
            test.strictEqual(data.name, 'cardId');
            test.strictEqual(data.isPK, 1);
            test.strictEqual(data.allowEmpty, 0);
            test.strictEqual(data.type, 'number');
            test.strictEqual(data.client, 1);
            test.strictEqual(data.server, 1);
            test.strictEqual(data.description, 'card pk');

            test.deepEqual(data.updateList, [ , , , , , , ,]);
            test.strictEqual(result, 'OK');
            test.done();
        });
    },
    get: function(test) {
        I.Models.ColumnStore.get(1, function(err, data) {
            test.strictEqual(data.id, 1);
            test.strictEqual(data.name, 'cardId');
            test.strictEqual(data.isPK, 1);
            test.strictEqual(data.allowEmpty, 0);
            test.strictEqual(data.type, 'number');
            test.strictEqual(data.client, 1);
            test.strictEqual(data.server, 1);
            test.strictEqual(data.description, 'card pk');

            test.deepEqual(data.updateList, [ , , , , , , ,]);
            test.done();
        });
    },
    update: function(test) {
        var column = makeColumn();
        column.name = 'cardName';
        column.client = 0;
        column.description = 'card name';
        I.Models.ColumnStore.update(column, function(err, data) {
            test.strictEqual(data.id, 1);
            test.strictEqual(data.name, 'cardName');
            test.strictEqual(data.isPK, 1);
            test.strictEqual(data.allowEmpty, 0);
            test.strictEqual(data.type, 'number');
            test.strictEqual(data.client, 0);
            test.strictEqual(data.server, 1);
            test.strictEqual(data.description, 'card name');

            test.deepEqual(data.updateList, [ , , , , , , ,]);
            test.done();
        });
    },
    updateSync: function(test) {
        var column = makeColumn();
        column.name = 'cardName';
        column.client = 0;
        column.description = 'card name';
        I.Models.ColumnStore.updateSync(column, function(err, data) {
            test.strictEqual(data.id, 1);
            test.strictEqual(data.name, 'cardName');
            test.strictEqual(data.isPK, 1);
            test.strictEqual(data.allowEmpty, 0);
            test.strictEqual(data.type, 'number');
            test.strictEqual(data.client, 0);
            test.strictEqual(data.server, 1);
            test.strictEqual(data.description, 'card name');

            test.deepEqual(data.updateList, [ , , , , , , ,]);
            test.done();
        });
    },
    del: function(test) {
        var column = makeColumn();
        I.Models.ColumnStore.del(column, function(err, result) {
            test.strictEqual(result, 1);
            test.done();
        });
    },
};

// list 
exports.list = {
    setGetPK: function(test) {
        var columnList = makeColumnList();
        test.strictEqual(columnList.getPK(), 1);

        columnList.setPK(17);
        test.strictEqual(columnList.getPK(), 17);
        test.done();
    },
    add: function(test) {
        var columnList = makeColumnList();
        var column = makeColumn();

        columnList.add(column);
        test.deepEqual(columnList.list, {});
        test.strictEqual(columnList.toAddList[0], column);
        test.done();
    },
    del: function(test) {
        var columnList = makeColumnListWithData();
        columnList.del(1);

        test.deepEqual(columnList.getKeys(), [1, 2]);
        test.deepEqual(I.Util.getLength(columnList.toDelList), 1);
        test.done();
    },
    getChildInList: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.get(1);
        test.strictEqual(column.name, 'cardId');
        test.strictEqual(column.client, 1);
        test.done();
    },
    getChildNotInList: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.get(3);
        test.strictEqual(column, null);
        test.done();
    },
    keys: function(test) {
        var columnList = makeColumnListWithData();
        var keys = columnList.getKeys();

        test.deepEqual(keys, [1, 2]);
        test.done();
    },
    set: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.get(1);
        column.name = 'cardName';
        column.client = 0;
        columnList.set(column);

        test.deepEqual(columnList.toAddList, []);
        test.deepEqual(columnList.toDelList, []);
        test.deepEqual(columnList.toUpdateList, []);

        test.deepEqual(columnList.toAddSyncList, []);
        test.deepEqual(columnList.toDelSyncList, []);
        test.deepEqual(columnList.toUpdateSyncList, []);
        test.done();
    },
    unset: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.get(1);
        columnList.unset(column);

        test.deepEqual(columnList.toAddList, []);
        test.deepEqual(columnList.toDelList, []);
        test.deepEqual(columnList.toUpdateList, []);

        test.deepEqual(columnList.toAddSyncList, []);
        test.deepEqual(columnList.toDelSyncList, []);
        test.deepEqual(columnList.toUpdateSyncList, []);

        test.deepEqual(columnList.getKeys(), [2]);
        test.done();
    },
    update: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.get(1);
        column.name = 'cardName';
        column.client = 0;
        columnList.update(column);
        test.strictEqual(columnList.toUpdateList[0].name, 'cardName');
        test.strictEqual(columnList.toUpdateList[0].client, 0);
        test.done();
    },
    last: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.last();
        test.strictEqual(column.id, 2);
        test.done();
    },
    getAbbArrayNoFilter: function(test) {
        var columnList = makeColumnListWithData();
        var abbArray = columnList.toAbbArray();

        test.deepEqual(abbArray, {
            1: {
                i: 1,
                n: 'cardId',
                ipk: 1,
                ae: 0,
                t: 'number',
                c: 1,
                s: 1,
                d: 'card pk',
            },
            2: {
                i: 2,
                n: 'cardId',
                ipk: 1,
                ae: 0,
                t: 'number',
                c: 1,
                s: 1,
                d: 'card pk',
            }
        });
        test.done();
    },
    getAbbArrayWithFilter: function(test) {
        var columnList = makeColumnListWithData();
        var abbArray = columnList.toAbbArray(true);

        test.deepEqual(abbArray, {
            1: {
                ipk: 1,
                ae: 0,
                t: 'number',
                c: 1,
                s: 1,
                d: 'card pk',
            },
            2: {
                ipk: 1,
                ae: 0,
                t: 'number',
                c: 1,
                s: 1,
                d: 'card pk',
            }
        });
        test.done();
    },
    getArrayNoFilter: function(test) {
        var columnList = makeColumnListWithData();
        var array = columnList.toArray();

        test.deepEqual(array, {
            1: {
                id: 1,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            },
            2: {
                id: 2,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            }
        });
        test.done();
    },
    getArrayWithFilter: function(test) {
        var columnList = makeColumnListWithData();
        var array = columnList.toArray(true);

        test.deepEqual(array, {
            1: {
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
            },
            2: {
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
            }
        });
        test.done();
    },
    fromAbbArrayResetUpdateList: function(test) {
        var columnList = makeColumnListWithData();
        var abbArray = columnList.toAbbArray();

        var newList = new I.Models.ColumnList(2);
        newList.fromAbbArray(abbArray, true);
        var newArray = newList.toArray();

        test.deepEqual(newArray, {
            1: {
                id: 1,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            },
            2: {
                id: 2,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            }
        });
        test.deepEqual(newList.list[1].updateList, [, , , , , , ,]);
        test.deepEqual(newList.list[2].updateList, [, , , , , , ,]);
        test.done();
    },
    fromAbbArrayNotResetUpdateList: function(test) {
        var columnList = makeColumnListWithData();
        var abbArray = columnList.toAbbArray();

        var newList = new I.Models.ColumnList(2);
        newList.fromAbbArray(abbArray);
        var newArray = newList.toArray();

        test.deepEqual(newArray, {
            1: {
                id: 1,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            },
            2: {
                id: 2,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            }
        });
        test.deepEqual(newList.list[1].updateList, [1, 1, 1, 1, 1, 1, 1, 1]);
        test.deepEqual(newList.list[2].updateList, [1, 1, 1, 1, 1, 1, 1, 1]);
        test.done();
    },
    fromArrayResetUpdateList: function(test) {
        var columnList = makeColumnListWithData();
        var array = columnList.toArray();

        var newList = new I.Models.ColumnList(2);
        newList.fromArray(array, true);
        var newArray = newList.toArray();

        test.deepEqual(newArray, {
            1: {
                id: 1,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            },
            2: {
                id: 2,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            }
        });
        test.deepEqual(newList.list[1].updateList, [, , , , , , ,]);
        test.deepEqual(newList.list[2].updateList, [, , , , , , ,]);
        test.done();
    },
    fromArrayNotResetUpdateList: function(test) {
        var columnList = makeColumnListWithData();
        var array = columnList.toArray();

        var newList = new I.Models.ColumnList(2);
        newList.fromArray(array);
        var newArray = newList.toArray();

        test.deepEqual(newArray, {
            1: {
                id: 1,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            },
            2: {
                id: 2,
                name: 'cardId',
                isPK: 1,
                allowEmpty: 0,
                type: 'number',
                client: 1,
                server: 1,
                description: 'card pk',
            }
        });
        test.deepEqual(newList.list[1].updateList, [1, 1, 1, 1, 1, 1, 1, 1]);
        test.deepEqual(newList.list[2].updateList, [1, 1, 1, 1, 1, 1, 1, 1]);
        test.done();
    },
    addSync: function(test) {
        var columnList = makeColumnListWithData();
        var column = makeColumn();
        column.setPK(3);

        columnList.addSync(column);

        test.deepEqual(columnList.getKeys(), [1, 2, 3]);
        test.deepEqual(columnList.toAddSyncList, [3]);
        test.done();
    },
    delSync: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.get(1);

        columnList.delSync(column);

        test.deepEqual(columnList.getKeys(), [2]);
        test.deepEqual(columnList.toDelSyncList, [column]);
        test.done();
    },
    updateSync: function(test) {
        var columnList = makeColumnListWithData();
        var column = columnList.get(1);
        column.name = 'cardName';

        columnList.updateSync(column);

        test.deepEqual(columnList.getKeys(), [1, 2]);
        test.strictEqual(columnList.list[1].name, 'cardName');
        test.deepEqual(columnList.toUpdateSyncList, [1]);
        test.done();
    },
};

// list store
if (TEST_STORE) exports.listStore = {
    updateDel: function(test) {
        I.Models.ColumnListStore.get(1, function(err, data) {
            var columnList = data;
            I.Models.ColumnListStore.del(columnList, function(err, data) {
                var columnList = data;
                test.deepEqual(columnList.getKeys(), []);
                test.done();
            });
        });
    },
    get: function(test) {
        I.Models.ColumnListStore.get(1, function(err, data) {
            test.deepEqual(data.list, {});
            test.done();
        });
    },
    updateAdd: function(test) {
        I.Models.ColumnListStore.get(1, function(err, data) {
            var columnList = data;
            columnList.add(makeColumn());
            I.Models.ColumnListStore.update(columnList, function(err, data) {
                var columnList = data;
                test.deepEqual(columnList.getKeys(), [2]);
                test.done();
            });
        });
    },
    updateUpdate: function(test) {
        I.Models.ColumnListStore.get(1, function(err, data) {
            var columnList = data;
            var column = columnList.get(2);
            column.name = 'cardName';
            columnList.update(column);
            I.Models.ColumnListStore.update(columnList, function(err, data) {
                var columnList = data;
                test.strictEqual(columnList.list[2].name, 'cardName');
                test.done();
            });
        });
    },
    updateAddSync: function(test) {
        I.Models.ColumnListStore.get(1, function(err, data) {
            var columnList = data;
            var column = makeColumn();
            column.id = 4;
            columnList.addSync(column);
            I.Models.ColumnListStore.updateSync(columnList, function(err, results) {
                test.done();
            });
        });
    },
    updateUpdateSync: function(test) {
        I.Models.ColumnListStore.get(1, function(err, data) {
            var columnList = data;
            var column = makeColumn();
            column.setPK(2);
            column.name = 'cardName';
            columnList.updateSync(column);
            I.Models.ColumnListStore.updateSync(columnList, function(err, results) {
                test.done();
            });
        });
    },
    updateDelSync: function(test) {
        I.Models.ColumnListStore.get(1, function(err, data) {
            var columnList = data;
            columnList.delSync(2);
            I.Models.ColumnListStore.updateSync(columnList, function(err, results) {
                test.done();
            });
        });
    },
};
